// <auto-generated />
using Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class libraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("Relational:Sequence:.Article_id_seq", "'Article_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Author_id_seq", "'Author_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Book_id_seq", "'Book_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Book_Type_id_seq", "'Book_Type_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.City_id_seq", "'City_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Conference_id_seq", "'Conference_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Discipline_id_seq", "'Discipline_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Draft_id_seq", "'Draft_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.File_id_seq", "'File_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Hypothesis_id_seq", "'Hypothesis_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Keyword_id_seq", "'Keyword_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Research_id_seq", "'Research_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Scale_id_seq", "'Scale_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Theme_id_seq", "'Theme_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Type_id_seq", "'Type_id_seq', '', '1', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Library.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Article_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Bibliography")
                        .HasColumnName("bibliography")
                        .HasAnnotation("Npgsql:Comment", "Название статьи в виде, пригодном для списка литературы по ГОСТ 7.1-2003.");

                    b.Property<int?>("CityId")
                        .HasColumnName("city_id")
                        .HasAnnotation("Npgsql:Comment", "id города, где проходила конференция.");

                    b.Property<DateTime?>("ConferenceEndDate")
                        .HasColumnName("conference_end_date")
                        .HasColumnType("date")
                        .HasAnnotation("Npgsql:Comment", "Дата окончания конференции.");

                    b.Property<int>("ConferenceId")
                        .HasColumnName("conference_id")
                        .HasAnnotation("Npgsql:Comment", "id конференции.");

                    b.Property<int?>("ConferenceNumber")
                        .HasColumnName("conference_number")
                        .HasAnnotation("Npgsql:Comment", "В который раз проводится конференция.");

                    b.Property<DateTime?>("ConferenceStartDate")
                        .HasColumnName("conference_start_date")
                        .HasColumnType("date")
                        .HasAnnotation("Npgsql:Comment", "Дата начала конференции.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название статьи.");

                    b.Property<int?>("Page")
                        .HasColumnName("page")
                        .HasAnnotation("Npgsql:Comment", "Страница на которой начинается статья.");

                    b.Property<int?>("Pages")
                        .HasColumnName("pages")
                        .HasAnnotation("Npgsql:Comment", "Количество страниц в статье.");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnName("publication_date")
                        .HasColumnType("date")
                        .HasAnnotation("Npgsql:Comment", "Дата публикации.");

                    b.Property<int?>("SupervisorId")
                        .HasColumnName("supervisor_id")
                        .HasAnnotation("Npgsql:Comment", "Научный руководитель, указанный в статье.");

                    b.Property<int?>("Volume")
                        .HasColumnName("volume")
                        .HasAnnotation("Npgsql:Comment", "Номер тома.");

                    b.Property<int?>("Year")
                        .HasColumnName("year")
                        .HasAnnotation("Npgsql:Comment", "Год публикации.");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("SupervisorId")
                        .HasName("fki_article_author_supervisor_id");

                    b.HasIndex("Name", "CityId", "ConferenceId")
                        .IsUnique()
                        .HasName("uk_article");

                    b.ToTable("article");

                    b.HasAnnotation("Npgsql:Comment", "Статьи и публикации.");
                });

            modelBuilder.Entity("Library.Models.ArticleArticle", b =>
                {
                    b.Property<int>("HostArticleId")
                        .HasColumnName("host_article_id")
                        .HasAnnotation("Npgsql:Comment", "Статья, которая ссылается на другую.");

                    b.Property<int>("ReferencedArticleId")
                        .HasColumnName("referenced_article_id")
                        .HasAnnotation("Npgsql:Comment", "Статья, используемая в списке литературы.");

                    b.HasKey("HostArticleId", "ReferencedArticleId");

                    b.HasIndex("ReferencedArticleId");

                    b.ToTable("article_article");

                    b.HasAnnotation("Npgsql:Comment", "Ссылки статей на другие статьи в списке литературы.");
                });

            modelBuilder.Entity("Library.Models.ArticleBook", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id")
                        .HasAnnotation("Npgsql:Comment", "id статьи.");

                    b.Property<int>("BookId")
                        .HasColumnName("book_id")
                        .HasAnnotation("Npgsql:Comment", "id книги.");

                    b.HasKey("ArticleId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("article_book");

                    b.HasAnnotation("Npgsql:Comment", "Таблица книг, используемых в списках литературы статей.");
                });

            modelBuilder.Entity("Library.Models.ArticleKeyword", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id")
                        .HasAnnotation("Npgsql:Comment", "id статьи.");

                    b.Property<int>("KeywordId")
                        .HasColumnName("keyword_id")
                        .HasAnnotation("Npgsql:Comment", "id ключевого слова.");

                    b.HasKey("ArticleId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("article_keyword");

                    b.HasAnnotation("Npgsql:Comment", "Промежуточная таблица связывающая статьи и ключевые слова.");
                });

            modelBuilder.Entity("Library.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Author_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasAnnotation("Npgsql:Comment", "Имя автора.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasAnnotation("Npgsql:Comment", "Фамилимя автора.");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasAnnotation("Npgsql:Comment", "Отчество автора.");

                    b.HasKey("Id");

                    b.ToTable("author");

                    b.HasAnnotation("Npgsql:Comment", "Таблица авторов, статей, книг, экспериментов и пр.");
                });

            modelBuilder.Entity("Library.Models.AuthorArticle", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasAnnotation("Npgsql:Comment", "id автора.");

                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id")
                        .HasAnnotation("Npgsql:Comment", "id статьи.");

                    b.HasKey("AuthorId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("author_article");

                    b.HasAnnotation("Npgsql:Comment", "Таблица, связывающая статьи и их авторов.");
                });

            modelBuilder.Entity("Library.Models.AuthorBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasAnnotation("Npgsql:Comment", "Ссылка на автора.");

                    b.Property<int>("BookId")
                        .HasColumnName("book_id")
                        .HasAnnotation("Npgsql:Comment", "Ссылка на книгу.");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("author_book");

                    b.HasAnnotation("Npgsql:Comment", "Таблица, связывающая авторов и их книги.");
                });

            modelBuilder.Entity("Library.Models.AuthorKeyword", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasAnnotation("Npgsql:Comment", "id автора.");

                    b.Property<int>("KeywordId")
                        .HasColumnName("keyword_id")
                        .HasAnnotation("Npgsql:Comment", "id ключевого слова.");

                    b.HasKey("AuthorId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("author_keyword");

                    b.HasAnnotation("Npgsql:Comment", "Промежуточная таблица, связывающая авторов и ключевые слова.");
                });

            modelBuilder.Entity("Library.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Book_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Bibliography")
                        .HasColumnName("bibliography")
                        .HasAnnotation("Npgsql:Comment", "Название книги в виде, пригодном для списка литературы по ГОСТ 7.1-2003.");

                    b.Property<int>("BookTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("book_type_id")
                        .HasDefaultValueSql("1")
                        .HasAnnotation("Npgsql:Comment", "Ссылка на тип книги.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название книги.");

                    b.Property<string>("Publisher")
                        .HasColumnName("publisher")
                        .HasAnnotation("Npgsql:Comment", "Издатель.");

                    b.Property<int?>("Volume")
                        .HasColumnName("volume")
                        .HasAnnotation("Npgsql:Comment", "Количество страниц.");

                    b.Property<int?>("Year")
                        .HasColumnName("year")
                        .HasAnnotation("Npgsql:Comment", "Год издания книги.");

                    b.HasKey("Id");

                    b.HasIndex("BookTypeId");

                    b.ToTable("book");

                    b.HasAnnotation("Npgsql:Comment", "Книги.");
                });

            modelBuilder.Entity("Library.Models.BookType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Book_Type_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название типа книги.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("uk_book_type_name");

                    b.ToTable("book_type");

                    b.HasAnnotation("Npgsql:Comment", "Таблица с типами книг.");
                });

            modelBuilder.Entity("Library.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"City_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название города.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("uk_city_name");

                    b.ToTable("city");

                    b.HasAnnotation("Npgsql:Comment", "Города, в которых проводятся конференции.");
                });

            modelBuilder.Entity("Library.Models.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Conference_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный идентификатор.");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasAnnotation("Npgsql:Comment", "Полное название конференции, включая место её проведения.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название конференции.");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnName("place")
                        .HasAnnotation("Npgsql:Comment", "Место проведения. (университет, ВУЗ)");

                    b.Property<int?>("ScaleId")
                        .HasColumnName("scale_id")
                        .HasAnnotation("Npgsql:Comment", "id масштаба конференции.");

                    b.HasKey("Id");

                    b.HasIndex("ScaleId")
                        .HasName("fki_scale");

                    b.HasIndex("Name", "Place")
                        .IsUnique()
                        .HasName("uk_conference");

                    b.ToTable("conference");

                    b.HasAnnotation("Npgsql:Comment", "Конференции.");
                });

            modelBuilder.Entity("Library.Models.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Discipline_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название дисциплины.");

                    b.Property<int>("Semester")
                        .HasColumnName("semester")
                        .HasAnnotation("Npgsql:Comment", "Семестр в котором ведется дисциплина.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("uk_discipline_name");

                    b.ToTable("discipline");

                    b.HasAnnotation("Npgsql:Comment", "Таблица со списком предметов.");
                });

            modelBuilder.Entity("Library.Models.DisciplineAuthor", b =>
                {
                    b.Property<int>("DisciplineId")
                        .HasColumnName("discipline_id")
                        .HasAnnotation("Npgsql:Comment", "id дисциплины.");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasAnnotation("Npgsql:Comment", "id автора.");

                    b.HasKey("DisciplineId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("discipline_author");

                    b.HasAnnotation("Npgsql:Comment", "Промежуточная таблица связывающая преподавателей и предметы.");
                });

            modelBuilder.Entity("Library.Models.Draft", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Draft_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasAnnotation("Npgsql:Comment", "Содержимое записки.");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("now()")
                        .HasAnnotation("Npgsql:Comment", "Дата создания записи.");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasAnnotation("Npgsql:Comment", "Название, заголовок.");

                    b.HasKey("Id");

                    b.ToTable("draft");

                    b.HasAnnotation("Npgsql:Comment", "Записки, мысли и черновики.");
                });

            modelBuilder.Entity("Library.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"File_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный идентификатор файла.");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content_type")
                        .HasDefaultValueSql("'unknown'::character varying")
                        .HasAnnotation("Npgsql:Comment", "Формат файла.");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasAnnotation("Npgsql:Comment", "Файл.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название файла в ФС.");

                    b.Property<int?>("TypeId")
                        .HasColumnName("type_id");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("version")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("TypeId", "Version")
                        .HasName("ix_file_type_version");

                    b.ToTable("file");

                    b.HasAnnotation("Npgsql:Comment", "Таблица со всеми файлами.");
                });

            modelBuilder.Entity("Library.Models.FileArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"File_id_seq\"'::regclass)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id")
                        .HasAnnotation("Npgsql:Comment", "Ссылка на статью.");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content_type")
                        .HasDefaultValueSql("'unknown'::character varying");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnName("data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int?>("TypeId")
                        .HasColumnName("type_id");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("version")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TypeId", "ArticleId")
                        .HasName("ix_file_article_type_article");

                    b.HasIndex("TypeId", "Version")
                        .HasName("ix_file_article_type_version");

                    b.HasIndex("TypeId", "Version", "ArticleId")
                        .HasName("ix_file_article_type_id_version_article");

                    b.ToTable("file_article");

                    b.HasAnnotation("Npgsql:Comment", "Файлы статей. Таблица наследована от общей таблицы файлов.");
                });

            modelBuilder.Entity("Library.Models.FileBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"File_id_seq\"'::regclass)");

                    b.Property<int>("BookId")
                        .HasColumnName("book_id")
                        .HasAnnotation("Npgsql:Comment", "Ссылка на книгу.");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content_type")
                        .HasDefaultValueSql("'unknown'::character varying");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnName("data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int?>("TypeId")
                        .HasColumnName("type_id");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("version")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("TypeId", "BookId")
                        .HasName("ix_file_book_type_book");

                    b.HasIndex("TypeId", "Version")
                        .HasName("ix_file_book_type_version");

                    b.HasIndex("TypeId", "Version", "BookId")
                        .HasName("ix_file_book_type_id_version_book");

                    b.ToTable("file_book");

                    b.HasAnnotation("Npgsql:Comment", "Файлы книиг. Таблица наследована  от общей таблицы файлов.");
                });

            modelBuilder.Entity("Library.Models.FileResearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"File_id_seq\"'::regclass)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content_type")
                        .HasDefaultValueSql("'unknown'::character varying");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnName("data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("ResearchId")
                        .HasColumnName("research_id")
                        .HasAnnotation("Npgsql:Comment", "Ссылка на исследование.");

                    b.Property<int?>("TypeId")
                        .HasColumnName("type_id");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("version")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("ResearchId");

                    b.HasIndex("TypeId", "ResearchId")
                        .HasName("ix_file_research_type_research");

                    b.HasIndex("TypeId", "Version")
                        .HasName("ix_file_research_type_version");

                    b.HasIndex("TypeId", "Version", "ResearchId")
                        .HasName("ix_file_research_type_id_version_research");

                    b.ToTable("file_research");

                    b.HasAnnotation("Npgsql:Comment", "Файлы исследований. Таблица наследована  от общей таблицы файлов.");
                });

            modelBuilder.Entity("Library.Models.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Type_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasAnnotation("Npgsql:Comment", "Описание типа.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название типа.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("uk_type");

                    b.ToTable("file_type");

                    b.HasAnnotation("Npgsql:Comment", "Тип содержимого тех или иных элементов.");
                });

            modelBuilder.Entity("Library.Models.Hypothesis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Hypothesis_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasAnnotation("Npgsql:Comment", "Текст гипотезы.");

                    b.Property<string>("Explanation")
                        .HasColumnName("explanation")
                        .HasAnnotation("Npgsql:Comment", "Пояснения к гипотезе.");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название гипотезы.");

                    b.HasKey("Id");

                    b.ToTable("hypothesis");

                    b.HasAnnotation("Npgsql:Comment", "Гипотезы.");
                });

            modelBuilder.Entity("Library.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Keyword_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Ключевое слово или фраза.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("uk_keyword");

                    b.ToTable("keyword");

                    b.HasAnnotation("Npgsql:Comment", "Таблица с ключевыми словами.");
                });

            modelBuilder.Entity("Library.Models.Research", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Research_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор таблицы.");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasAnnotation("Npgsql:Comment", "Описание эксперимента.");

                    b.Property<string>("Goal")
                        .HasColumnName("goal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название эксперимента.");

                    b.Property<short?>("Progress")
                        .HasColumnName("progress");

                    b.Property<string>("Tasks")
                        .HasColumnName("tasks");

                    b.HasKey("Id");

                    b.ToTable("research");

                    b.HasAnnotation("Npgsql:Comment", "Исследования.");
                });

            modelBuilder.Entity("Library.Models.ResearchArticle", b =>
                {
                    b.Property<int>("ResearchId")
                        .HasColumnName("research_id")
                        .HasAnnotation("Npgsql:Comment", "id исследования.");

                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id")
                        .HasAnnotation("Npgsql:Comment", "id статьи");

                    b.HasKey("ResearchId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("research_article");

                    b.HasAnnotation("Npgsql:Comment", "Таблица связывающая статьи и используемые в них исследования.");
                });

            modelBuilder.Entity("Library.Models.ResearchAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasAnnotation("Npgsql:Comment", "id автора.");

                    b.Property<int>("ResearchId")
                        .HasColumnName("research_id")
                        .HasAnnotation("Npgsql:Comment", "id исследования.");

                    b.HasKey("AuthorId", "ResearchId");

                    b.HasIndex("ResearchId");

                    b.ToTable("research_author");

                    b.HasAnnotation("Npgsql:Comment", "Таблица, связывающая автора и их исследования.");
                });

            modelBuilder.Entity("Library.Models.ResearchBook", b =>
                {
                    b.Property<int>("ResearchId")
                        .HasColumnName("research_id")
                        .HasAnnotation("Npgsql:Comment", "id исследования.");

                    b.Property<int>("BookId")
                        .HasColumnName("book_id")
                        .HasAnnotation("Npgsql:Comment", "id книги.");

                    b.HasKey("ResearchId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("research_book");

                    b.HasAnnotation("Npgsql:Comment", "Таблица, связывающая исследования и книги.");
                });

            modelBuilder.Entity("Library.Models.ResearchTheme", b =>
                {
                    b.Property<int>("ResearchId")
                        .HasColumnName("research_id")
                        .HasAnnotation("Npgsql:Comment", "id исследования.");

                    b.Property<int>("ThemeId")
                        .HasColumnName("theme_id")
                        .HasAnnotation("Npgsql:Comment", "id темы.");

                    b.HasKey("ResearchId", "ThemeId");

                    b.HasIndex("ThemeId");

                    b.ToTable("research_theme");

                    b.HasAnnotation("Npgsql:Comment", "Таблица, связывающая исследования и их тематику.");
                });

            modelBuilder.Entity("Library.Models.Scale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Scale_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Масштаб (Городская, Международная, Региональная и т. д.).");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("uk_scale");

                    b.ToTable("scale");

                    b.HasAnnotation("Npgsql:Comment", "Таблица с перечнем масштабов конференций.");
                });

            modelBuilder.Entity("Library.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Theme_id_seq\"'::regclass)")
                        .HasAnnotation("Npgsql:Comment", "Уникальный внутренний идентификатор.");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasAnnotation("Npgsql:Comment", "Описание темы.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Название темы.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("uk_theme_name");

                    b.ToTable("theme");

                    b.HasAnnotation("Npgsql:Comment", "Тематики научных исследований, публикаций и т. д.");
                });

            modelBuilder.Entity("Library.Models.ThemeArticle", b =>
                {
                    b.Property<int>("ThemeId")
                        .HasColumnName("theme_id")
                        .HasAnnotation("Npgsql:Comment", "id темы.");

                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id")
                        .HasAnnotation("Npgsql:Comment", "id статьи.");

                    b.HasKey("ThemeId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("theme_article");

                    b.HasAnnotation("Npgsql:Comment", "Таблица тем той или иной статьи.");
                });

            modelBuilder.Entity("Library.Models.ThemeAuthor", b =>
                {
                    b.Property<int>("ThemeId")
                        .HasColumnName("theme_id")
                        .HasAnnotation("Npgsql:Comment", "id темы.");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasAnnotation("Npgsql:Comment", "id автора.");

                    b.HasKey("ThemeId", "AuthorId");

                    b.HasIndex("AuthorId")
                        .HasName("fki_theme_author_author");

                    b.ToTable("theme_author");

                    b.HasAnnotation("Npgsql:Comment", "Таблица, связывающая авторов и темы их публикаций и работ.");
                });

            modelBuilder.Entity("Library.Models.ThemeBook", b =>
                {
                    b.Property<int>("ThemeId")
                        .HasColumnName("theme_id")
                        .HasAnnotation("Npgsql:Comment", "id темы.");

                    b.Property<int>("BookId")
                        .HasColumnName("book_id")
                        .HasAnnotation("Npgsql:Comment", "id книги.");

                    b.HasKey("ThemeId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("theme_book");

                    b.HasAnnotation("Npgsql:Comment", "Таблица, связывающая книги и темы.");
                });

            modelBuilder.Entity("Library.Models.Article", b =>
                {
                    b.HasOne("Library.Models.City", "City")
                        .WithMany("Article")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_article_city");

                    b.HasOne("Library.Models.Conference", "Conference")
                        .WithMany("Article")
                        .HasForeignKey("ConferenceId")
                        .HasConstraintName("fk_article_conference");

                    b.HasOne("Library.Models.Author", "Supervisor")
                        .WithMany("Article")
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("fk_article_author_supervisor_id");
                });

            modelBuilder.Entity("Library.Models.ArticleArticle", b =>
                {
                    b.HasOne("Library.Models.Article", "HostArticle")
                        .WithMany("ArticleArticleHostArticle")
                        .HasForeignKey("HostArticleId")
                        .HasConstraintName("fk_host_article")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Article", "ReferencedArticle")
                        .WithMany("ArticleArticleReferencedArticle")
                        .HasForeignKey("ReferencedArticleId")
                        .HasConstraintName("fk_referenced_article");
                });

            modelBuilder.Entity("Library.Models.ArticleBook", b =>
                {
                    b.HasOne("Library.Models.Article", "Article")
                        .WithMany("ArticleBook")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_article_book_article")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Book", "Book")
                        .WithMany("ArticleBook")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_article_book_book");
                });

            modelBuilder.Entity("Library.Models.ArticleKeyword", b =>
                {
                    b.HasOne("Library.Models.Article", "Article")
                        .WithMany("ArticleKeyword")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_aricle_keyword_article")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Keyword", "Keyword")
                        .WithMany("ArticleKeyword")
                        .HasForeignKey("KeywordId")
                        .HasConstraintName("fk_article_keyword_keyword");
                });

            modelBuilder.Entity("Library.Models.AuthorArticle", b =>
                {
                    b.HasOne("Library.Models.Article", "Article")
                        .WithMany("AuthorArticle")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_author_article_article")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Author", "Author")
                        .WithMany("AuthorArticle")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_author_article_author");
                });

            modelBuilder.Entity("Library.Models.AuthorBook", b =>
                {
                    b.HasOne("Library.Models.Author", "Author")
                        .WithMany("AuthorBook")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_author_book_author");

                    b.HasOne("Library.Models.Book", "Book")
                        .WithMany("AuthorBook")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_author_book_book")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Library.Models.AuthorKeyword", b =>
                {
                    b.HasOne("Library.Models.Author", "Author")
                        .WithMany("AuthorKeyword")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_author_keyword_author")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Keyword", "Keyword")
                        .WithMany("AuthorKeyword")
                        .HasForeignKey("KeywordId")
                        .HasConstraintName("fk_author_keyword_keyword");
                });

            modelBuilder.Entity("Library.Models.Book", b =>
                {
                    b.HasOne("Library.Models.BookType", "BookType")
                        .WithMany("Book")
                        .HasForeignKey("BookTypeId")
                        .HasConstraintName("fk_book_book_type");
                });

            modelBuilder.Entity("Library.Models.Conference", b =>
                {
                    b.HasOne("Library.Models.Scale", "Scale")
                        .WithMany("Conference")
                        .HasForeignKey("ScaleId")
                        .HasConstraintName("fk_conference_scale");
                });

            modelBuilder.Entity("Library.Models.DisciplineAuthor", b =>
                {
                    b.HasOne("Library.Models.Author", "Author")
                        .WithMany("DisciplineAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_discipline_author_author");

                    b.HasOne("Library.Models.Discipline", "Discipline")
                        .WithMany("DisciplineAuthor")
                        .HasForeignKey("DisciplineId")
                        .HasConstraintName("fk_discipline_author_discipline")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Library.Models.File", b =>
                {
                    b.HasOne("Library.Models.FileType", "Type")
                        .WithMany("File")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_file_type");
                });

            modelBuilder.Entity("Library.Models.FileArticle", b =>
                {
                    b.HasOne("Library.Models.Article", "Article")
                        .WithMany("FileArticle")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_file_article_article")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.FileType", "Type")
                        .WithMany("FileArticle")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_file_article_type");
                });

            modelBuilder.Entity("Library.Models.FileBook", b =>
                {
                    b.HasOne("Library.Models.Book", "Book")
                        .WithMany("FileBook")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_file_book_book")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.FileType", "Type")
                        .WithMany("FileBook")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_file_book_type");
                });

            modelBuilder.Entity("Library.Models.FileResearch", b =>
                {
                    b.HasOne("Library.Models.Research", "Research")
                        .WithMany("FileResearch")
                        .HasForeignKey("ResearchId")
                        .HasConstraintName("fk_file_research_research")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.FileType", "Type")
                        .WithMany("FileResearch")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_file_research_type");
                });

            modelBuilder.Entity("Library.Models.ResearchArticle", b =>
                {
                    b.HasOne("Library.Models.Article", "Article")
                        .WithMany("ResearchArticle")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_research_article_article")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Research", "Research")
                        .WithMany("ResearchArticle")
                        .HasForeignKey("ResearchId")
                        .HasConstraintName("fk_research_article_research");
                });

            modelBuilder.Entity("Library.Models.ResearchAuthor", b =>
                {
                    b.HasOne("Library.Models.Author", "Author")
                        .WithMany("ResearchAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_research_author_author")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Research", "Research")
                        .WithMany("ResearchAuthor")
                        .HasForeignKey("ResearchId")
                        .HasConstraintName("fk_research_author_research")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Library.Models.ResearchBook", b =>
                {
                    b.HasOne("Library.Models.Book", "Book")
                        .WithMany("ResearchBook")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_research_book_book")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Research", "Research")
                        .WithMany("ResearchBook")
                        .HasForeignKey("ResearchId")
                        .HasConstraintName("fk_research_book_research");
                });

            modelBuilder.Entity("Library.Models.ResearchTheme", b =>
                {
                    b.HasOne("Library.Models.Research", "Research")
                        .WithMany("ResearchTheme")
                        .HasForeignKey("ResearchId")
                        .HasConstraintName("fk_research_theme_research")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Theme", "Theme")
                        .WithMany("ResearchTheme")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("fk_research_theme_theme");
                });

            modelBuilder.Entity("Library.Models.ThemeArticle", b =>
                {
                    b.HasOne("Library.Models.Article", "Article")
                        .WithMany("ThemeArticle")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_theme_article_article")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Theme", "Theme")
                        .WithMany("ThemeArticle")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("fk_theme_article_theme");
                });

            modelBuilder.Entity("Library.Models.ThemeAuthor", b =>
                {
                    b.HasOne("Library.Models.Author", "Author")
                        .WithMany("ThemeAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_theme_author_author")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Theme", "Theme")
                        .WithMany("ThemeAuthor")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("fk_theme_author_theme");
                });

            modelBuilder.Entity("Library.Models.ThemeBook", b =>
                {
                    b.HasOne("Library.Models.Book", "Book")
                        .WithMany("ThemeBook")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_theme_book_book")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Theme", "Theme")
                        .WithMany("ThemeBook")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("fk_theme_book_theme");
                });
#pragma warning restore 612, 618
        }
    }
}

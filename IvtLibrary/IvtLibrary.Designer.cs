//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("IvtLibraryModel", "fk_article_author_supervisor_id", "Author", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(IvtLibrary.Author), "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article), true)]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "fk_article_city", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(IvtLibrary.City), "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article), true)]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "fk_article_conference", "Conference", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(IvtLibrary.Conference), "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article), true)]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "fk_book_book_type", "Book_Type", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(IvtLibrary.Book_Type), "Book", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Book), true)]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "fk_conference_scale", "Scale", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(IvtLibrary.Scale), "Conference", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Conference), true)]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "fk_file_type", "Type", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(IvtLibrary.Type), "File", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.File), true)]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Article_Article", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article), "Article1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Article_Book", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article), "Book", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Book))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Author_Article", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article), "Author", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Author))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Author_Book", "Author", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Author), "Book", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Book))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Book_File", "Book", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Book), "File", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.File))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Discipline_Author", "Author", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Author), "Discipline", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Discipline))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "File_Article", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article), "File", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.File))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Research_Article", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article), "Research", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Research))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Research_Author", "Author", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Author), "Research", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Research))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Research_Book", "Book", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Book), "Research", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Research))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Research_File", "File", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.File), "Research", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Research))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Research_Theme", "Research", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Research), "Theme", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Theme))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Theme_Article", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Article), "Theme", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Theme))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Theme_Author", "Author", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Author), "Theme", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Theme))]
[assembly: EdmRelationshipAttribute("IvtLibraryModel", "Theme_Book", "Book", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Book), "Theme", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IvtLibrary.Theme))]

#endregion

namespace IvtLibrary
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class IvtLibraryEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект IvtLibraryEntities, используя строку соединения из раздела "IvtLibraryEntities" файла конфигурации приложения.
        /// </summary>
        public IvtLibraryEntities() : base("name=IvtLibraryEntities", "IvtLibraryEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта IvtLibraryEntities.
        /// </summary>
        public IvtLibraryEntities(string connectionString) : base(connectionString, "IvtLibraryEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта IvtLibraryEntities.
        /// </summary>
        public IvtLibraryEntities(EntityConnection connection) : base(connection, "IvtLibraryEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Article> Article
        {
            get
            {
                if ((_Article == null))
                {
                    _Article = base.CreateObjectSet<Article>("Article");
                }
                return _Article;
            }
        }
        private ObjectSet<Article> _Article;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Author> Author
        {
            get
            {
                if ((_Author == null))
                {
                    _Author = base.CreateObjectSet<Author>("Author");
                }
                return _Author;
            }
        }
        private ObjectSet<Author> _Author;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Book> Book
        {
            get
            {
                if ((_Book == null))
                {
                    _Book = base.CreateObjectSet<Book>("Book");
                }
                return _Book;
            }
        }
        private ObjectSet<Book> _Book;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Book_Type> Book_Type
        {
            get
            {
                if ((_Book_Type == null))
                {
                    _Book_Type = base.CreateObjectSet<Book_Type>("Book_Type");
                }
                return _Book_Type;
            }
        }
        private ObjectSet<Book_Type> _Book_Type;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<City> City
        {
            get
            {
                if ((_City == null))
                {
                    _City = base.CreateObjectSet<City>("City");
                }
                return _City;
            }
        }
        private ObjectSet<City> _City;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Conference> Conference
        {
            get
            {
                if ((_Conference == null))
                {
                    _Conference = base.CreateObjectSet<Conference>("Conference");
                }
                return _Conference;
            }
        }
        private ObjectSet<Conference> _Conference;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Discipline> Discipline
        {
            get
            {
                if ((_Discipline == null))
                {
                    _Discipline = base.CreateObjectSet<Discipline>("Discipline");
                }
                return _Discipline;
            }
        }
        private ObjectSet<Discipline> _Discipline;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Draft> Draft
        {
            get
            {
                if ((_Draft == null))
                {
                    _Draft = base.CreateObjectSet<Draft>("Draft");
                }
                return _Draft;
            }
        }
        private ObjectSet<Draft> _Draft;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<File> File
        {
            get
            {
                if ((_File == null))
                {
                    _File = base.CreateObjectSet<File>("File");
                }
                return _File;
            }
        }
        private ObjectSet<File> _File;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Hypothesis> Hypothesis
        {
            get
            {
                if ((_Hypothesis == null))
                {
                    _Hypothesis = base.CreateObjectSet<Hypothesis>("Hypothesis");
                }
                return _Hypothesis;
            }
        }
        private ObjectSet<Hypothesis> _Hypothesis;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Research> Research
        {
            get
            {
                if ((_Research == null))
                {
                    _Research = base.CreateObjectSet<Research>("Research");
                }
                return _Research;
            }
        }
        private ObjectSet<Research> _Research;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Scale> Scale
        {
            get
            {
                if ((_Scale == null))
                {
                    _Scale = base.CreateObjectSet<Scale>("Scale");
                }
                return _Scale;
            }
        }
        private ObjectSet<Scale> _Scale;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Theme> Theme
        {
            get
            {
                if ((_Theme == null))
                {
                    _Theme = base.CreateObjectSet<Theme>("Theme");
                }
                return _Theme;
            }
        }
        private ObjectSet<Theme> _Theme;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Type> Type
        {
            get
            {
                if ((_Type == null))
                {
                    _Type = base.CreateObjectSet<Type>("Type");
                }
                return _Type;
            }
        }
        private ObjectSet<Type> _Type;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Article. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToArticle(Article article)
        {
            base.AddObject("Article", article);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Author. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAuthor(Author author)
        {
            base.AddObject("Author", author);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Book. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToBook(Book book)
        {
            base.AddObject("Book", book);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Book_Type. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToBook_Type(Book_Type book_Type)
        {
            base.AddObject("Book_Type", book_Type);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet City. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCity(City city)
        {
            base.AddObject("City", city);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Conference. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToConference(Conference conference)
        {
            base.AddObject("Conference", conference);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Discipline. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDiscipline(Discipline discipline)
        {
            base.AddObject("Discipline", discipline);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Draft. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDraft(Draft draft)
        {
            base.AddObject("Draft", draft);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet File. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToFile(File file)
        {
            base.AddObject("File", file);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Hypothesis. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToHypothesis(Hypothesis hypothesis)
        {
            base.AddObject("Hypothesis", hypothesis);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Research. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToResearch(Research research)
        {
            base.AddObject("Research", research);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Scale. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToScale(Scale scale)
        {
            base.AddObject("Scale", scale);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Theme. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTheme(Theme theme)
        {
            base.AddObject("Theme", theme);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Type. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToType(Type type)
        {
            base.AddObject("Type", type);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Article")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Article : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Article.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        /// <param name="conference_id">Исходное значение свойства conference_id.</param>
        public static Article CreateArticle(global::System.Int32 id, global::System.String name, global::System.Int32 conference_id)
        {
            Article article = new Article();
            article.id = id;
            article.name = name;
            article.conference_id = conference_id;
            return article;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> city_id
        {
            get
            {
                return _city_id;
            }
            set
            {
                Oncity_idChanging(value);
                ReportPropertyChanging("city_id");
                _city_id = StructuralObject.SetValidValue(value, "city_id");
                ReportPropertyChanged("city_id");
                Oncity_idChanged();
            }
        }
        private Nullable<global::System.Int32> _city_id;
        partial void Oncity_idChanging(Nullable<global::System.Int32> value);
        partial void Oncity_idChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 conference_id
        {
            get
            {
                return _conference_id;
            }
            set
            {
                Onconference_idChanging(value);
                ReportPropertyChanging("conference_id");
                _conference_id = StructuralObject.SetValidValue(value, "conference_id");
                ReportPropertyChanged("conference_id");
                Onconference_idChanged();
            }
        }
        private global::System.Int32 _conference_id;
        partial void Onconference_idChanging(global::System.Int32 value);
        partial void Onconference_idChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> year
        {
            get
            {
                return _year;
            }
            set
            {
                OnyearChanging(value);
                ReportPropertyChanging("year");
                _year = StructuralObject.SetValidValue(value, "year");
                ReportPropertyChanged("year");
                OnyearChanged();
            }
        }
        private Nullable<global::System.Int32> _year;
        partial void OnyearChanging(Nullable<global::System.Int32> value);
        partial void OnyearChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String bibliography
        {
            get
            {
                return _bibliography;
            }
            set
            {
                OnbibliographyChanging(value);
                ReportPropertyChanging("bibliography");
                _bibliography = StructuralObject.SetValidValue(value, true, "bibliography");
                ReportPropertyChanged("bibliography");
                OnbibliographyChanged();
            }
        }
        private global::System.String _bibliography;
        partial void OnbibliographyChanging(global::System.String value);
        partial void OnbibliographyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> supervisor_id
        {
            get
            {
                return _supervisor_id;
            }
            set
            {
                Onsupervisor_idChanging(value);
                ReportPropertyChanging("supervisor_id");
                _supervisor_id = StructuralObject.SetValidValue(value, "supervisor_id");
                ReportPropertyChanged("supervisor_id");
                Onsupervisor_idChanged();
            }
        }
        private Nullable<global::System.Int32> _supervisor_id;
        partial void Onsupervisor_idChanging(Nullable<global::System.Int32> value);
        partial void Onsupervisor_idChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> conference_start_date
        {
            get
            {
                return _conference_start_date;
            }
            set
            {
                Onconference_start_dateChanging(value);
                ReportPropertyChanging("conference_start_date");
                _conference_start_date = StructuralObject.SetValidValue(value, "conference_start_date");
                ReportPropertyChanged("conference_start_date");
                Onconference_start_dateChanged();
            }
        }
        private Nullable<global::System.DateTime> _conference_start_date;
        partial void Onconference_start_dateChanging(Nullable<global::System.DateTime> value);
        partial void Onconference_start_dateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> conference_end_date
        {
            get
            {
                return _conference_end_date;
            }
            set
            {
                Onconference_end_dateChanging(value);
                ReportPropertyChanging("conference_end_date");
                _conference_end_date = StructuralObject.SetValidValue(value, "conference_end_date");
                ReportPropertyChanged("conference_end_date");
                Onconference_end_dateChanged();
            }
        }
        private Nullable<global::System.DateTime> _conference_end_date;
        partial void Onconference_end_dateChanging(Nullable<global::System.DateTime> value);
        partial void Onconference_end_dateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> publication_date
        {
            get
            {
                return _publication_date;
            }
            set
            {
                Onpublication_dateChanging(value);
                ReportPropertyChanging("publication_date");
                _publication_date = StructuralObject.SetValidValue(value, "publication_date");
                ReportPropertyChanged("publication_date");
                Onpublication_dateChanged();
            }
        }
        private Nullable<global::System.DateTime> _publication_date;
        partial void Onpublication_dateChanging(Nullable<global::System.DateTime> value);
        partial void Onpublication_dateChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_article_author_supervisor_id", "Author")]
        public Author Supervizor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Author>("IvtLibraryModel.fk_article_author_supervisor_id", "Author").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Author>("IvtLibraryModel.fk_article_author_supervisor_id", "Author").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Author> SupervizorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Author>("IvtLibraryModel.fk_article_author_supervisor_id", "Author");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Author>("IvtLibraryModel.fk_article_author_supervisor_id", "Author", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_article_city", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("IvtLibraryModel.fk_article_city", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("IvtLibraryModel.fk_article_city", "City").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("IvtLibraryModel.fk_article_city", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("IvtLibraryModel.fk_article_city", "City", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_article_conference", "Conference")]
        public Conference Conference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Conference>("IvtLibraryModel.fk_article_conference", "Conference").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Conference>("IvtLibraryModel.fk_article_conference", "Conference").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Conference> ConferenceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Conference>("IvtLibraryModel.fk_article_conference", "Conference");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Conference>("IvtLibraryModel.fk_article_conference", "Conference", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Article_Article", "Article1")]
        public EntityCollection<Article> Article1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.Article_Article", "Article1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.Article_Article", "Article1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Article_Article", "Article")]
        public EntityCollection<Article> Article2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.Article_Article", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.Article_Article", "Article", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Article_Book", "Book")]
        public EntityCollection<Book> Book
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Book>("IvtLibraryModel.Article_Book", "Book");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Book>("IvtLibraryModel.Article_Book", "Book", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Author_Article", "Author")]
        public EntityCollection<Author> Author
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Author>("IvtLibraryModel.Author_Article", "Author");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Author>("IvtLibraryModel.Author_Article", "Author", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "File_Article", "File")]
        public EntityCollection<File> File
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<File>("IvtLibraryModel.File_Article", "File");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<File>("IvtLibraryModel.File_Article", "File", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_Article", "Research")]
        public EntityCollection<Research> Research
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Research>("IvtLibraryModel.Research_Article", "Research");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Research>("IvtLibraryModel.Research_Article", "Research", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Theme_Article", "Theme")]
        public EntityCollection<Theme> Theme
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Theme>("IvtLibraryModel.Theme_Article", "Theme");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Theme>("IvtLibraryModel.Theme_Article", "Theme", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Author")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Author : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Author.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="last_name">Исходное значение свойства last_name.</param>
        public static Author CreateAuthor(global::System.Int32 id, global::System.String last_name)
        {
            Author author = new Author();
            author.id = id;
            author.last_name = last_name;
            return author;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String first_name
        {
            get
            {
                return _first_name;
            }
            set
            {
                Onfirst_nameChanging(value);
                ReportPropertyChanging("first_name");
                _first_name = StructuralObject.SetValidValue(value, true, "first_name");
                ReportPropertyChanged("first_name");
                Onfirst_nameChanged();
            }
        }
        private global::System.String _first_name;
        partial void Onfirst_nameChanging(global::System.String value);
        partial void Onfirst_nameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String middle_name
        {
            get
            {
                return _middle_name;
            }
            set
            {
                Onmiddle_nameChanging(value);
                ReportPropertyChanging("middle_name");
                _middle_name = StructuralObject.SetValidValue(value, true, "middle_name");
                ReportPropertyChanged("middle_name");
                Onmiddle_nameChanged();
            }
        }
        private global::System.String _middle_name;
        partial void Onmiddle_nameChanging(global::System.String value);
        partial void Onmiddle_nameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String last_name
        {
            get
            {
                return _last_name;
            }
            set
            {
                Onlast_nameChanging(value);
                ReportPropertyChanging("last_name");
                _last_name = StructuralObject.SetValidValue(value, false, "last_name");
                ReportPropertyChanged("last_name");
                Onlast_nameChanged();
            }
        }
        private global::System.String _last_name;
        partial void Onlast_nameChanging(global::System.String value);
        partial void Onlast_nameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_article_author_supervisor_id", "Article")]
        public EntityCollection<Article> Article
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.fk_article_author_supervisor_id", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.fk_article_author_supervisor_id", "Article", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Author_Article", "Article")]
        public EntityCollection<Article> Article1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.Author_Article", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.Author_Article", "Article", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Author_Book", "Book")]
        public EntityCollection<Book> Book
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Book>("IvtLibraryModel.Author_Book", "Book");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Book>("IvtLibraryModel.Author_Book", "Book", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Discipline_Author", "Discipline")]
        public EntityCollection<Discipline> Discipline
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Discipline>("IvtLibraryModel.Discipline_Author", "Discipline");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Discipline>("IvtLibraryModel.Discipline_Author", "Discipline", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_Author", "Research")]
        public EntityCollection<Research> Research
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Research>("IvtLibraryModel.Research_Author", "Research");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Research>("IvtLibraryModel.Research_Author", "Research", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Theme_Author", "Theme")]
        public EntityCollection<Theme> Theme
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Theme>("IvtLibraryModel.Theme_Author", "Theme");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Theme>("IvtLibraryModel.Theme_Author", "Theme", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Book")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Book : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Book.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        /// <param name="book_type_id">Исходное значение свойства book_type_id.</param>
        public static Book CreateBook(global::System.Int32 id, global::System.String name, global::System.Int32 book_type_id)
        {
            Book book = new Book();
            book.id = id;
            book.name = name;
            book.book_type_id = book_type_id;
            return book;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> year
        {
            get
            {
                return _year;
            }
            set
            {
                OnyearChanging(value);
                ReportPropertyChanging("year");
                _year = StructuralObject.SetValidValue(value, "year");
                ReportPropertyChanged("year");
                OnyearChanged();
            }
        }
        private Nullable<global::System.Int32> _year;
        partial void OnyearChanging(Nullable<global::System.Int32> value);
        partial void OnyearChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String publisher
        {
            get
            {
                return _publisher;
            }
            set
            {
                OnpublisherChanging(value);
                ReportPropertyChanging("publisher");
                _publisher = StructuralObject.SetValidValue(value, true, "publisher");
                ReportPropertyChanged("publisher");
                OnpublisherChanged();
            }
        }
        private global::System.String _publisher;
        partial void OnpublisherChanging(global::System.String value);
        partial void OnpublisherChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> volume
        {
            get
            {
                return _volume;
            }
            set
            {
                OnvolumeChanging(value);
                ReportPropertyChanging("volume");
                _volume = StructuralObject.SetValidValue(value, "volume");
                ReportPropertyChanged("volume");
                OnvolumeChanged();
            }
        }
        private Nullable<global::System.Int32> _volume;
        partial void OnvolumeChanging(Nullable<global::System.Int32> value);
        partial void OnvolumeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String bibliography
        {
            get
            {
                return _bibliography;
            }
            set
            {
                OnbibliographyChanging(value);
                ReportPropertyChanging("bibliography");
                _bibliography = StructuralObject.SetValidValue(value, true, "bibliography");
                ReportPropertyChanged("bibliography");
                OnbibliographyChanged();
            }
        }
        private global::System.String _bibliography;
        partial void OnbibliographyChanging(global::System.String value);
        partial void OnbibliographyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 book_type_id
        {
            get
            {
                return _book_type_id;
            }
            set
            {
                Onbook_type_idChanging(value);
                ReportPropertyChanging("book_type_id");
                _book_type_id = StructuralObject.SetValidValue(value, "book_type_id");
                ReportPropertyChanged("book_type_id");
                Onbook_type_idChanged();
            }
        }
        private global::System.Int32 _book_type_id;
        partial void Onbook_type_idChanging(global::System.Int32 value);
        partial void Onbook_type_idChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_book_book_type", "Book_Type")]
        public Book_Type Book_Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Book_Type>("IvtLibraryModel.fk_book_book_type", "Book_Type").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Book_Type>("IvtLibraryModel.fk_book_book_type", "Book_Type").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Book_Type> Book_TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Book_Type>("IvtLibraryModel.fk_book_book_type", "Book_Type");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Book_Type>("IvtLibraryModel.fk_book_book_type", "Book_Type", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Article_Book", "Article")]
        public EntityCollection<Article> Article
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.Article_Book", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.Article_Book", "Article", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Author_Book", "Author")]
        public EntityCollection<Author> Author
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Author>("IvtLibraryModel.Author_Book", "Author");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Author>("IvtLibraryModel.Author_Book", "Author", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Book_File", "File")]
        public EntityCollection<File> File
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<File>("IvtLibraryModel.Book_File", "File");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<File>("IvtLibraryModel.Book_File", "File", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_Book", "Research")]
        public EntityCollection<Research> Research
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Research>("IvtLibraryModel.Research_Book", "Research");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Research>("IvtLibraryModel.Research_Book", "Research", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Theme_Book", "Theme")]
        public EntityCollection<Theme> Theme
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Theme>("IvtLibraryModel.Theme_Book", "Theme");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Theme>("IvtLibraryModel.Theme_Book", "Theme", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Book_Type")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Book_Type : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Book_Type.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        public static Book_Type CreateBook_Type(global::System.Int32 id, global::System.String name)
        {
            Book_Type book_Type = new Book_Type();
            book_Type.id = id;
            book_Type.name = name;
            return book_Type;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_book_book_type", "Book")]
        public EntityCollection<Book> Book
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Book>("IvtLibraryModel.fk_book_book_type", "Book");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Book>("IvtLibraryModel.fk_book_book_type", "Book", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта City.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        public static City CreateCity(global::System.Int32 id, global::System.String name)
        {
            City city = new City();
            city.id = id;
            city.name = name;
            return city;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_article_city", "Article")]
        public EntityCollection<Article> Article
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.fk_article_city", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.fk_article_city", "Article", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Conference")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Conference : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Conference.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        /// <param name="place">Исходное значение свойства place.</param>
        public static Conference CreateConference(global::System.Int32 id, global::System.String name, global::System.String place)
        {
            Conference conference = new Conference();
            conference.id = id;
            conference.name = name;
            conference.place = place;
            return conference;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String place
        {
            get
            {
                return _place;
            }
            set
            {
                OnplaceChanging(value);
                ReportPropertyChanging("place");
                _place = StructuralObject.SetValidValue(value, false, "place");
                ReportPropertyChanged("place");
                OnplaceChanged();
            }
        }
        private global::System.String _place;
        partial void OnplaceChanging(global::System.String value);
        partial void OnplaceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String full_name
        {
            get
            {
                return _full_name;
            }
            set
            {
                Onfull_nameChanging(value);
                ReportPropertyChanging("full_name");
                _full_name = StructuralObject.SetValidValue(value, true, "full_name");
                ReportPropertyChanged("full_name");
                Onfull_nameChanged();
            }
        }
        private global::System.String _full_name;
        partial void Onfull_nameChanging(global::System.String value);
        partial void Onfull_nameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> scale_id
        {
            get
            {
                return _scale_id;
            }
            set
            {
                Onscale_idChanging(value);
                ReportPropertyChanging("scale_id");
                _scale_id = StructuralObject.SetValidValue(value, "scale_id");
                ReportPropertyChanged("scale_id");
                Onscale_idChanged();
            }
        }
        private Nullable<global::System.Int32> _scale_id;
        partial void Onscale_idChanging(Nullable<global::System.Int32> value);
        partial void Onscale_idChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_article_conference", "Article")]
        public EntityCollection<Article> Article
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.fk_article_conference", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.fk_article_conference", "Article", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_conference_scale", "Scale")]
        public Scale Scale
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Scale>("IvtLibraryModel.fk_conference_scale", "Scale").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Scale>("IvtLibraryModel.fk_conference_scale", "Scale").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Scale> ScaleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Scale>("IvtLibraryModel.fk_conference_scale", "Scale");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Scale>("IvtLibraryModel.fk_conference_scale", "Scale", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Discipline")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Discipline : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Discipline.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        /// <param name="semester">Исходное значение свойства semester.</param>
        public static Discipline CreateDiscipline(global::System.Int32 id, global::System.String name, global::System.Int32 semester)
        {
            Discipline discipline = new Discipline();
            discipline.id = id;
            discipline.name = name;
            discipline.semester = semester;
            return discipline;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 semester
        {
            get
            {
                return _semester;
            }
            set
            {
                OnsemesterChanging(value);
                ReportPropertyChanging("semester");
                _semester = StructuralObject.SetValidValue(value, "semester");
                ReportPropertyChanged("semester");
                OnsemesterChanged();
            }
        }
        private global::System.Int32 _semester;
        partial void OnsemesterChanging(global::System.Int32 value);
        partial void OnsemesterChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Discipline_Author", "Author")]
        public EntityCollection<Author> Author
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Author>("IvtLibraryModel.Discipline_Author", "Author");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Author>("IvtLibraryModel.Discipline_Author", "Author", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Draft")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Draft : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Draft.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="content">Исходное значение свойства content.</param>
        /// <param name="creation_date">Исходное значение свойства creation_date.</param>
        public static Draft CreateDraft(global::System.Int64 id, global::System.String content, global::System.DateTimeOffset creation_date)
        {
            Draft draft = new Draft();
            draft.id = id;
            draft.content = content;
            draft.creation_date = creation_date;
            return draft;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String title
        {
            get
            {
                return _title;
            }
            set
            {
                OntitleChanging(value);
                ReportPropertyChanging("title");
                _title = StructuralObject.SetValidValue(value, true, "title");
                ReportPropertyChanged("title");
                OntitleChanged();
            }
        }
        private global::System.String _title;
        partial void OntitleChanging(global::System.String value);
        partial void OntitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String content
        {
            get
            {
                return _content;
            }
            set
            {
                OncontentChanging(value);
                ReportPropertyChanging("content");
                _content = StructuralObject.SetValidValue(value, false, "content");
                ReportPropertyChanged("content");
                OncontentChanged();
            }
        }
        private global::System.String _content;
        partial void OncontentChanging(global::System.String value);
        partial void OncontentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTimeOffset creation_date
        {
            get
            {
                return _creation_date;
            }
            set
            {
                Oncreation_dateChanging(value);
                ReportPropertyChanging("creation_date");
                _creation_date = StructuralObject.SetValidValue(value, "creation_date");
                ReportPropertyChanged("creation_date");
                Oncreation_dateChanged();
            }
        }
        private global::System.DateTimeOffset _creation_date;
        partial void Oncreation_dateChanging(global::System.DateTimeOffset value);
        partial void Oncreation_dateChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="File")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class File : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта File.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        /// <param name="content_type">Исходное значение свойства content_type.</param>
        /// <param name="data">Исходное значение свойства data.</param>
        /// <param name="version">Исходное значение свойства version.</param>
        public static File CreateFile(global::System.Int32 id, global::System.String name, global::System.String content_type, global::System.Byte[] data, global::System.Int32 version)
        {
            File file = new File();
            file.id = id;
            file.name = name;
            file.content_type = content_type;
            file.data = data;
            file.version = version;
            return file;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String content_type
        {
            get
            {
                return _content_type;
            }
            set
            {
                Oncontent_typeChanging(value);
                ReportPropertyChanging("content_type");
                _content_type = StructuralObject.SetValidValue(value, false, "content_type");
                ReportPropertyChanged("content_type");
                Oncontent_typeChanged();
            }
        }
        private global::System.String _content_type;
        partial void Oncontent_typeChanging(global::System.String value);
        partial void Oncontent_typeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] data
        {
            get
            {
                return StructuralObject.GetValidValue(_data);
            }
            set
            {
                OndataChanging(value);
                ReportPropertyChanging("data");
                _data = StructuralObject.SetValidValue(value, false, "data");
                ReportPropertyChanged("data");
                OndataChanged();
            }
        }
        private global::System.Byte[] _data;
        partial void OndataChanging(global::System.Byte[] value);
        partial void OndataChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> type_id
        {
            get
            {
                return _type_id;
            }
            set
            {
                Ontype_idChanging(value);
                ReportPropertyChanging("type_id");
                _type_id = StructuralObject.SetValidValue(value, "type_id");
                ReportPropertyChanged("type_id");
                Ontype_idChanged();
            }
        }
        private Nullable<global::System.Int32> _type_id;
        partial void Ontype_idChanging(Nullable<global::System.Int32> value);
        partial void Ontype_idChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value, "version");
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private global::System.Int32 _version;
        partial void OnversionChanging(global::System.Int32 value);
        partial void OnversionChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_file_type", "Type")]
        public Type Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type>("IvtLibraryModel.fk_file_type", "Type").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type>("IvtLibraryModel.fk_file_type", "Type").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Type> TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type>("IvtLibraryModel.fk_file_type", "Type");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Type>("IvtLibraryModel.fk_file_type", "Type", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Book_File", "Book")]
        public EntityCollection<Book> Book
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Book>("IvtLibraryModel.Book_File", "Book");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Book>("IvtLibraryModel.Book_File", "Book", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "File_Article", "Article")]
        public EntityCollection<Article> Article
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.File_Article", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.File_Article", "Article", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_File", "Research")]
        public EntityCollection<Research> Research
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Research>("IvtLibraryModel.Research_File", "Research");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Research>("IvtLibraryModel.Research_File", "Research", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Hypothesis")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Hypothesis : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Hypothesis.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="content">Исходное значение свойства content.</param>
        public static Hypothesis CreateHypothesis(global::System.Int64 id, global::System.String content)
        {
            Hypothesis hypothesis = new Hypothesis();
            hypothesis.id = id;
            hypothesis.content = content;
            return hypothesis;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, true, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String content
        {
            get
            {
                return _content;
            }
            set
            {
                OncontentChanging(value);
                ReportPropertyChanging("content");
                _content = StructuralObject.SetValidValue(value, false, "content");
                ReportPropertyChanged("content");
                OncontentChanged();
            }
        }
        private global::System.String _content;
        partial void OncontentChanging(global::System.String value);
        partial void OncontentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String explanation
        {
            get
            {
                return _explanation;
            }
            set
            {
                OnexplanationChanging(value);
                ReportPropertyChanging("explanation");
                _explanation = StructuralObject.SetValidValue(value, true, "explanation");
                ReportPropertyChanged("explanation");
                OnexplanationChanged();
            }
        }
        private global::System.String _explanation;
        partial void OnexplanationChanging(global::System.String value);
        partial void OnexplanationChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Research")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Research : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Research.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        public static Research CreateResearch(global::System.Int32 id, global::System.String name)
        {
            Research research = new Research();
            research.id = id;
            research.name = name;
            return research;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, true, "description");
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String goal
        {
            get
            {
                return _goal;
            }
            set
            {
                OngoalChanging(value);
                ReportPropertyChanging("goal");
                _goal = StructuralObject.SetValidValue(value, true, "goal");
                ReportPropertyChanged("goal");
                OngoalChanged();
            }
        }
        private global::System.String _goal;
        partial void OngoalChanging(global::System.String value);
        partial void OngoalChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String tasks
        {
            get
            {
                return _tasks;
            }
            set
            {
                OntasksChanging(value);
                ReportPropertyChanging("tasks");
                _tasks = StructuralObject.SetValidValue(value, true, "tasks");
                ReportPropertyChanged("tasks");
                OntasksChanged();
            }
        }
        private global::System.String _tasks;
        partial void OntasksChanging(global::System.String value);
        partial void OntasksChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int16> progress
        {
            get
            {
                return _progress;
            }
            set
            {
                OnprogressChanging(value);
                ReportPropertyChanging("progress");
                _progress = StructuralObject.SetValidValue(value, "progress");
                ReportPropertyChanged("progress");
                OnprogressChanged();
            }
        }
        private Nullable<global::System.Int16> _progress;
        partial void OnprogressChanging(Nullable<global::System.Int16> value);
        partial void OnprogressChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_Article", "Article")]
        public EntityCollection<Article> Article
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.Research_Article", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.Research_Article", "Article", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_Author", "Author")]
        public EntityCollection<Author> Author
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Author>("IvtLibraryModel.Research_Author", "Author");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Author>("IvtLibraryModel.Research_Author", "Author", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_Book", "Book")]
        public EntityCollection<Book> Book
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Book>("IvtLibraryModel.Research_Book", "Book");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Book>("IvtLibraryModel.Research_Book", "Book", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_File", "File")]
        public EntityCollection<File> File
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<File>("IvtLibraryModel.Research_File", "File");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<File>("IvtLibraryModel.Research_File", "File", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_Theme", "Theme")]
        public EntityCollection<Theme> Theme
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Theme>("IvtLibraryModel.Research_Theme", "Theme");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Theme>("IvtLibraryModel.Research_Theme", "Theme", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Scale")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Scale : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Scale.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        public static Scale CreateScale(global::System.Int32 id, global::System.String name)
        {
            Scale scale = new Scale();
            scale.id = id;
            scale.name = name;
            return scale;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_conference_scale", "Conference")]
        public EntityCollection<Conference> Conference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Conference>("IvtLibraryModel.fk_conference_scale", "Conference");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Conference>("IvtLibraryModel.fk_conference_scale", "Conference", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Theme")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Theme : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Theme.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        public static Theme CreateTheme(global::System.Int32 id, global::System.String name)
        {
            Theme theme = new Theme();
            theme.id = id;
            theme.name = name;
            return theme;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, true, "description");
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Research_Theme", "Research")]
        public EntityCollection<Research> Research
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Research>("IvtLibraryModel.Research_Theme", "Research");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Research>("IvtLibraryModel.Research_Theme", "Research", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Theme_Article", "Article")]
        public EntityCollection<Article> Article
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("IvtLibraryModel.Theme_Article", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("IvtLibraryModel.Theme_Article", "Article", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Theme_Author", "Author")]
        public EntityCollection<Author> Author
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Author>("IvtLibraryModel.Theme_Author", "Author");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Author>("IvtLibraryModel.Theme_Author", "Author", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "Theme_Book", "Book")]
        public EntityCollection<Book> Book
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Book>("IvtLibraryModel.Theme_Book", "Book");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Book>("IvtLibraryModel.Theme_Book", "Book", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IvtLibraryModel", Name="Type")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Type : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Type.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        public static Type CreateType(global::System.Int32 id, global::System.String name)
        {
            Type type = new Type();
            type.id = id;
            type.name = name;
            return type;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, true, "description");
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IvtLibraryModel", "fk_file_type", "File")]
        public EntityCollection<File> File
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<File>("IvtLibraryModel.fk_file_type", "File");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<File>("IvtLibraryModel.fk_file_type", "File", value);
                }
            }
        }

        #endregion

    }

    #endregion

}

//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 01.01.2012 22:25:50
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Data;
using System.Linq;
using System.Data.Common;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("LibraryModel", "Scale_Conference", "Scale", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LibraryModel.Scale), "Conferences", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Conference), true)]
[assembly: EdmRelationshipAttribute("LibraryModel", "City_Article", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LibraryModel.City), "Articles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Article), true)]
[assembly: EdmRelationshipAttribute("LibraryModel", "Conference_Article", "Conference", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LibraryModel.Conference), "Articles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Article), true)]
[assembly: EdmRelationshipAttribute("LibraryModel", "Author_Book", "Authors", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Author), "Books", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Book))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Author_Research", "Authors", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Author), "Researches", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Research))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Article_Theme", "Articles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Article), "Themes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Theme))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Book_Theme", "Books", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Book), "Themes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Theme))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Research_Theme", "Researches", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Research), "Themes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Theme))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Book_Research", "Books", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Book), "Researches", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Research))]
[assembly: EdmRelationshipAttribute("LibraryModel", "File_Research", "Files", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.File), "Researches", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Research))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Book_File", "Books", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Book), "Files", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.File))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Author_Theme", "Authors", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Author), "Themes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Theme))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Article_Article", "Articles1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Article), "Articles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Article))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Article_Research", "Articles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Article), "Researches", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Research))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Article_Book", "Articles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Article), "Books", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Book))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Article_Author", "Articles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Article), "Authors", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Author))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Article_File", "Articles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.Article), "Files", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.File))]
[assembly: EdmRelationshipAttribute("LibraryModel", "Type_File", "Type", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LibraryModel.Type), "Files", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibraryModel.File), true)]

#endregion

namespace LibraryModel
{

    #region LibraryEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class LibraryEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new LibraryEntities object.
        /// </summary>
        public LibraryEntities() : 
                base(@"name=LibraryEntitiesConnectionString", "LibraryEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new LibraryEntities object using the connection string found in the 'LibraryEntities' section of the application configuration file.
        /// </summary>
        public LibraryEntities(string connectionString) : 
                base(connectionString, "LibraryEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new LibraryEntities object.
        /// </summary>
        public LibraryEntities(EntityConnection connection) : base(connection, "LibraryEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Research> Researches
        {
            get
            {
                if ((_Researches == null))
                {
                    _Researches = base.CreateObjectSet<Research>("Researches");
                }
                return _Researches;
            }
        }
        private ObjectSet<Research> _Researches;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Conference> Conferences
        {
            get
            {
                if ((_Conferences == null))
                {
                    _Conferences = base.CreateObjectSet<Conference>("Conferences");
                }
                return _Conferences;
            }
        }
        private ObjectSet<Conference> _Conferences;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Theme> Themes
        {
            get
            {
                if ((_Themes == null))
                {
                    _Themes = base.CreateObjectSet<Theme>("Themes");
                }
                return _Themes;
            }
        }
        private ObjectSet<Theme> _Themes;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Scale> Scales
        {
            get
            {
                if ((_Scales == null))
                {
                    _Scales = base.CreateObjectSet<Scale>("Scales");
                }
                return _Scales;
            }
        }
        private ObjectSet<Scale> _Scales;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<File> Files
        {
            get
            {
                if ((_Files == null))
                {
                    _Files = base.CreateObjectSet<File>("Files");
                }
                return _Files;
            }
        }
        private ObjectSet<File> _Files;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Article> Articles
        {
            get
            {
                if ((_Articles == null))
                {
                    _Articles = base.CreateObjectSet<Article>("Articles");
                }
                return _Articles;
            }
        }
        private ObjectSet<Article> _Articles;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Book> Books
        {
            get
            {
                if ((_Books == null))
                {
                    _Books = base.CreateObjectSet<Book>("Books");
                }
                return _Books;
            }
        }
        private ObjectSet<Book> _Books;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Author> Authors
        {
            get
            {
                if ((_Authors == null))
                {
                    _Authors = base.CreateObjectSet<Author>("Authors");
                }
                return _Authors;
            }
        }
        private ObjectSet<Author> _Authors;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Type> Types
        {
            get
            {
                if ((_Types == null))
                {
                    _Types = base.CreateObjectSet<Type>("Types");
                }
                return _Types;
            }
        }
        private ObjectSet<Type> _Types;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Researches EntitySet.
        /// </summary>
        public void AddToResearches(Research research)
        {
            base.AddObject("Researches", research);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Conferences EntitySet.
        /// </summary>
        public void AddToConferences(Conference conference)
        {
            base.AddObject("Conferences", conference);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Themes EntitySet.
        /// </summary>
        public void AddToThemes(Theme theme)
        {
            base.AddObject("Themes", theme);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Scales EntitySet.
        /// </summary>
        public void AddToScales(Scale scale)
        {
            base.AddObject("Scales", scale);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Files EntitySet.
        /// </summary>
        public void AddToFiles(File file)
        {
            base.AddObject("Files", file);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Articles EntitySet.
        /// </summary>
        public void AddToArticles(Article article)
        {
            base.AddObject("Articles", article);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Books EntitySet.
        /// </summary>
        public void AddToBooks(Book book)
        {
            base.AddObject("Books", book);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Authors EntitySet.
        /// </summary>
        public void AddToAuthors(Author author)
        {
            base.AddObject("Authors", author);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Types EntitySet.
        /// </summary>
        public void AddToTypes(Type type)
        {
            base.AddObject("Types", type);
        }

        #endregion
    }

    #endregion

    #region Entity Classes

    #region City

    /// <summary>
    /// There are no comments for LibraryModel.City in the schema.
    /// </summary>
    /// <LongDescription>
    /// Города, в которых проводятся конференции.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        public static City CreateCity(int id, string name)
        {
            City city = new City();
            city.Id = id;
            city.Name = name;
            return city;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный внутренний идентификатор.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    /// <LongDescription>
    /// Название города.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "City_Article", "Articles")]


        public EntityCollection<Article> Articles
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Article>("LibraryModel.City_Article", "Articles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Article>("LibraryModel.City_Article", "Articles", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Research

    /// <summary>
    /// There are no comments for LibraryModel.Research in the schema.
    /// </summary>
    /// <LongDescription>
    /// Исследования.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="Research")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Research : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Research object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        public static Research CreateResearch(int id, string name)
        {
            Research research = new Research();
            research.Id = id;
            research.Name = name;
            return research;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный внутренний идентификатор таблицы.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    /// <LongDescription>
    /// Название эксперимента.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
    /// <summary>
    /// There are no comments for Description in the schema.
    /// </summary>
    /// <LongDescription>
    /// Описание эксперимента.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Author_Research", "Authors")]


        public EntityCollection<Author> Authors
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Author>("LibraryModel.Author_Research", "Authors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Author>("LibraryModel.Author_Research", "Authors", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Theme in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Research_Theme", "Themes")]


        public EntityCollection<Theme> Themes
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Theme>("LibraryModel.Research_Theme", "Themes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Theme>("LibraryModel.Research_Theme", "Themes", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Book in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Book_Research", "Books")]


        public EntityCollection<Book> Books
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Book>("LibraryModel.Book_Research", "Books");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Book>("LibraryModel.Book_Research", "Books", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for File in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "File_Research", "Files")]


        public EntityCollection<File> Files
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<File>("LibraryModel.File_Research", "Files");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<File>("LibraryModel.File_Research", "Files", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Research", "Articles")]


        public EntityCollection<Article> Articles
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Article>("LibraryModel.Article_Research", "Articles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Article>("LibraryModel.Article_Research", "Articles", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Conference

    /// <summary>
    /// There are no comments for LibraryModel.Conference in the schema.
    /// </summary>
    /// <LongDescription>
    /// Конференции.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="Conference")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Conference : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Conference object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="place">Initial value of Place.</param>
        public static Conference CreateConference(int id, string name, string place)
        {
            Conference conference = new Conference();
            conference.Id = id;
            conference.Name = name;
            conference.Place = place;
            return conference;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный идентификатор.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    /// <LongDescription>
    /// Название конференции.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
    /// <summary>
    /// There are no comments for Place in the schema.
    /// </summary>
    /// <LongDescription>
    /// Место проведения. (университет, ВУЗ)
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Place
        {
            get
            {
                string value = _Place;
                OnGetPlace(ref value);
                return value;
            }
            set
            {
                if (_Place != value)
                {
                  OnPlaceChanging(ref value);
                  ReportPropertyChanging("Place");
                  _Place = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Place");
                  OnPlaceChanged();
              }
            }
        }
        private string _Place;
        partial void OnGetPlace(ref string value);
        partial void OnPlaceChanging(ref string value);
        partial void OnPlaceChanged();
    
    /// <summary>
    /// There are no comments for FullName in the schema.
    /// </summary>
    /// <LongDescription>
    /// Полное название конференции, включая место её проведения.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string FullName
        {
            get
            {
                string value = _FullName;
                OnGetFullName(ref value);
                return value;
            }
            set
            {
                if (_FullName != value)
                {
                  OnFullNameChanging(ref value);
                  ReportPropertyChanging("FullName");
                  _FullName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("FullName");
                  OnFullNameChanged();
              }
            }
        }
        private string _FullName;
        partial void OnGetFullName(ref string value);
        partial void OnFullNameChanging(ref string value);
        partial void OnFullNameChanged();
    
    /// <summary>
    /// There are no comments for ScaleId in the schema.
    /// </summary>
    /// <LongDescription>
    /// id масштаба конференции.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> ScaleId
        {
            get
            {
                global::System.Nullable<int> value = _ScaleId;
                OnGetScaleId(ref value);
                return value;
            }
            set
            {
                if (_ScaleId != value)
                {
                  OnScaleIdChanging(ref value);
                  ReportPropertyChanging("ScaleId");
                  _ScaleId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ScaleId");
                  OnScaleIdChanged();
              }
            }
        }
        private global::System.Nullable<int> _ScaleId;
        partial void OnGetScaleId(ref global::System.Nullable<int> value);
        partial void OnScaleIdChanging(ref global::System.Nullable<int> value);
        partial void OnScaleIdChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Scale in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Scale_Conference", "Scale")]


        public Scale Scale
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Scale>("LibraryModel.Scale_Conference", "Scale").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Scale>("LibraryModel.Scale_Conference", "Scale").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Scale in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Scale> ScaleReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Scale>("LibraryModel.Scale_Conference", "Scale");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Scale>("LibraryModel.Scale_Conference", "Scale", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Scale>("LibraryModel.Scale_Conference", "Scale").Value = null;
                }
            }
        }
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Conference_Article", "Articles")]


        public EntityCollection<Article> Articles
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Article>("LibraryModel.Conference_Article", "Articles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Article>("LibraryModel.Conference_Article", "Articles", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Theme

    /// <summary>
    /// There are no comments for LibraryModel.Theme in the schema.
    /// </summary>
    /// <LongDescription>
    /// Тематики научных исследований, публикаций и т. д.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="Theme")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Theme : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Theme object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        public static Theme CreateTheme(int id, string name)
        {
            Theme theme = new Theme();
            theme.Id = id;
            theme.Name = name;
            return theme;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный внутренний идентификатор.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    /// <LongDescription>
    /// Название темы.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
    /// <summary>
    /// There are no comments for Description in the schema.
    /// </summary>
    /// <LongDescription>
    /// Описание темы.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Theme", "Articles")]


        public EntityCollection<Article> Articles
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Article>("LibraryModel.Article_Theme", "Articles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Article>("LibraryModel.Article_Theme", "Articles", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Book in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Book_Theme", "Books")]


        public EntityCollection<Book> Books
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Book>("LibraryModel.Book_Theme", "Books");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Book>("LibraryModel.Book_Theme", "Books", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Research in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Research_Theme", "Researches")]


        public EntityCollection<Research> Researches
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Research>("LibraryModel.Research_Theme", "Researches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Research>("LibraryModel.Research_Theme", "Researches", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Author_Theme", "Authors")]


        public EntityCollection<Author> Authors
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Author>("LibraryModel.Author_Theme", "Authors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Author>("LibraryModel.Author_Theme", "Authors", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Scale

    /// <summary>
    /// There are no comments for LibraryModel.Scale in the schema.
    /// </summary>
    /// <LongDescription>
    /// Таблица с перечнем масштабов конференций.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="Scale")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Scale : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Scale object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        public static Scale CreateScale(int id, string name)
        {
            Scale scale = new Scale();
            scale.Id = id;
            scale.Name = name;
            return scale;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный внутренний идентификатор.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    /// <LongDescription>
    /// Масштаб (Городская, Международная, Региональная и т. д.).
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Conference in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Scale_Conference", "Conferences")]


        public EntityCollection<Conference> Conferences
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Conference>("LibraryModel.Scale_Conference", "Conferences");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Conference>("LibraryModel.Scale_Conference", "Conferences", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region File

    /// <summary>
    /// There are no comments for LibraryModel.File in the schema.
    /// </summary>
    /// <LongDescription>
    /// Таблица со всеми файлами.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="File")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class File : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new File object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="contentType">Initial value of ContentType.</param>
        /// <param name="data">Initial value of Data.</param>
        public static File CreateFile(int id, string name, string contentType, byte[] data)
        {
            File file = new File();
            file.Id = id;
            file.Name = name;
            file.ContentType = contentType;
            file.Data = data;
            return file;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный идентификатор файла.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    /// <LongDescription>
    /// Название файла в ФС.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
    /// <summary>
    /// There are no comments for ContentType in the schema.
    /// </summary>
    /// <LongDescription>
    /// Формат файла.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string ContentType
        {
            get
            {
                string value = _ContentType;
                OnGetContentType(ref value);
                return value;
            }
            set
            {
                if (_ContentType != value)
                {
                  OnContentTypeChanging(ref value);
                  ReportPropertyChanging("ContentType");
                  _ContentType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ContentType");
                  OnContentTypeChanged();
              }
            }
        }
        private string _ContentType = @"unknown";
        partial void OnGetContentType(ref string value);
        partial void OnContentTypeChanging(ref string value);
        partial void OnContentTypeChanged();
    
    /// <summary>
    /// There are no comments for TypeId in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> TypeId
        {
            get
            {
                global::System.Nullable<int> value = _TypeId;
                OnGetTypeId(ref value);
                return value;
            }
            set
            {
                if (_TypeId != value)
                {
                  OnTypeIdChanging(ref value);
                  ReportPropertyChanging("TypeId");
                  _TypeId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TypeId");
                  OnTypeIdChanged();
              }
            }
        }
        private global::System.Nullable<int> _TypeId;
        partial void OnGetTypeId(ref global::System.Nullable<int> value);
        partial void OnTypeIdChanging(ref global::System.Nullable<int> value);
        partial void OnTypeIdChanged();
    
    /// <summary>
    /// There are no comments for Data in the schema.
    /// </summary>
    /// <LongDescription>
    /// Файл.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public byte[] Data
        {
            get
            {
                byte[] value = _Data;
                OnGetData(ref value);
                return value;
            }
            set
            {
                if (_Data != value)
                {
                  OnDataChanging(ref value);
                  ReportPropertyChanging("Data");
                  _Data = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Data");
                  OnDataChanged();
              }
            }
        }
        private byte[] _Data;
        partial void OnGetData(ref byte[] value);
        partial void OnDataChanging(ref byte[] value);
        partial void OnDataChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Research in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "File_Research", "Researches")]


        public EntityCollection<Research> Researches
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Research>("LibraryModel.File_Research", "Researches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Research>("LibraryModel.File_Research", "Researches", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Book in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Book_File", "Books")]


        public EntityCollection<Book> Books
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Book>("LibraryModel.Book_File", "Books");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Book>("LibraryModel.Book_File", "Books", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_File", "Articles")]


        public EntityCollection<Article> Articles
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Article>("LibraryModel.Article_File", "Articles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Article>("LibraryModel.Article_File", "Articles", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Type_File", "Type")]


        public Type Type
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Type>("LibraryModel.Type_File", "Type").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Type>("LibraryModel.Type_File", "Type").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Type> TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Type>("LibraryModel.Type_File", "Type");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Type>("LibraryModel.Type_File", "Type", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Type>("LibraryModel.Type_File", "Type").Value = null;
                }
            }
        }

        #endregion
    }
    #endregion

    #region Article

    /// <summary>
    /// There are no comments for LibraryModel.Article in the schema.
    /// </summary>
    /// <LongDescription>
    /// Статьи и публикации.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="Article")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Article : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Article object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="conferenceId">Initial value of ConferenceId.</param>
        public static Article CreateArticle(int id, string name, int conferenceId)
        {
            Article article = new Article();
            article.Id = id;
            article.Name = name;
            article.ConferenceId = conferenceId;
            return article;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный внутренний идентификатор.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    /// <LongDescription>
    /// Название статьи.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
    /// <summary>
    /// There are no comments for CityId in the schema.
    /// </summary>
    /// <LongDescription>
    /// id города, где проходила конференция.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> CityId
        {
            get
            {
                global::System.Nullable<int> value = _CityId;
                OnGetCityId(ref value);
                return value;
            }
            set
            {
                if (_CityId != value)
                {
                  OnCityIdChanging(ref value);
                  ReportPropertyChanging("CityId");
                  _CityId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CityId");
                  OnCityIdChanged();
              }
            }
        }
        private global::System.Nullable<int> _CityId;
        partial void OnGetCityId(ref global::System.Nullable<int> value);
        partial void OnCityIdChanging(ref global::System.Nullable<int> value);
        partial void OnCityIdChanged();
    
    /// <summary>
    /// There are no comments for ConferenceId in the schema.
    /// </summary>
    /// <LongDescription>
    /// id конференции.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int ConferenceId
        {
            get
            {
                int value = _ConferenceId;
                OnGetConferenceId(ref value);
                return value;
            }
            set
            {
                if (_ConferenceId != value)
                {
                  OnConferenceIdChanging(ref value);
                  ReportPropertyChanging("ConferenceId");
                  _ConferenceId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ConferenceId");
                  OnConferenceIdChanged();
              }
            }
        }
        private int _ConferenceId;
        partial void OnGetConferenceId(ref int value);
        partial void OnConferenceIdChanging(ref int value);
        partial void OnConferenceIdChanged();
    
    /// <summary>
    /// There are no comments for Year in the schema.
    /// </summary>
    /// <LongDescription>
    /// Год публикации.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> Year
        {
            get
            {
                global::System.Nullable<int> value = _Year;
                OnGetYear(ref value);
                return value;
            }
            set
            {
                if (_Year != value)
                {
                  OnYearChanging(ref value);
                  ReportPropertyChanging("Year");
                  _Year = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Year");
                  OnYearChanged();
              }
            }
        }
        private global::System.Nullable<int> _Year;
        partial void OnGetYear(ref global::System.Nullable<int> value);
        partial void OnYearChanging(ref global::System.Nullable<int> value);
        partial void OnYearChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "City_Article", "City")]


        public City City
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<City>("LibraryModel.City_Article", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<City>("LibraryModel.City_Article", "City").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<City>("LibraryModel.City_Article", "City");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<City>("LibraryModel.City_Article", "City", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<City>("LibraryModel.City_Article", "City").Value = null;
                }
            }
        }
        /// <summary>
        /// There are no comments for Conference in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Conference_Article", "Conference")]


        public Conference Conference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Conference>("LibraryModel.Conference_Article", "Conference").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Conference>("LibraryModel.Conference_Article", "Conference").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Conference in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Conference> ConferenceReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Conference>("LibraryModel.Conference_Article", "Conference");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Conference>("LibraryModel.Conference_Article", "Conference", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Conference>("LibraryModel.Conference_Article", "Conference").Value = null;
                }
            }
        }
        /// <summary>
        /// There are no comments for Theme in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Theme", "Themes")]


        public EntityCollection<Theme> Themes
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Theme>("LibraryModel.Article_Theme", "Themes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Theme>("LibraryModel.Article_Theme", "Themes", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Article", "Articles")]


        public EntityCollection<Article> Articles
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Article>("LibraryModel.Article_Article", "Articles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Article>("LibraryModel.Article_Article", "Articles", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Article", "Articles1")]


        public EntityCollection<Article> Articles1
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Article>("LibraryModel.Article_Article", "Articles1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Article>("LibraryModel.Article_Article", "Articles1", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Research in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Research", "Researches")]


        public EntityCollection<Research> Researches
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Research>("LibraryModel.Article_Research", "Researches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Research>("LibraryModel.Article_Research", "Researches", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Book in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Book", "Books")]


        public EntityCollection<Book> Books
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Book>("LibraryModel.Article_Book", "Books");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Book>("LibraryModel.Article_Book", "Books", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Author", "Authors")]


        public EntityCollection<Author> Authors
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Author>("LibraryModel.Article_Author", "Authors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Author>("LibraryModel.Article_Author", "Authors", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for File in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_File", "Files")]


        public EntityCollection<File> Files
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<File>("LibraryModel.Article_File", "Files");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<File>("LibraryModel.Article_File", "Files", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Book

    /// <summary>
    /// There are no comments for LibraryModel.Book in the schema.
    /// </summary>
    /// <LongDescription>
    /// Книги.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="Book")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Book : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Book object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        public static Book CreateBook(int id, string name)
        {
            Book book = new Book();
            book.Id = id;
            book.Name = name;
            return book;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный внутренний идентификатор.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    /// <LongDescription>
    /// Название книги.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
    /// <summary>
    /// There are no comments for Year in the schema.
    /// </summary>
    /// <LongDescription>
    /// Год издания книги.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> Year
        {
            get
            {
                global::System.Nullable<int> value = _Year;
                OnGetYear(ref value);
                return value;
            }
            set
            {
                if (_Year != value)
                {
                  OnYearChanging(ref value);
                  ReportPropertyChanging("Year");
                  _Year = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Year");
                  OnYearChanged();
              }
            }
        }
        private global::System.Nullable<int> _Year;
        partial void OnGetYear(ref global::System.Nullable<int> value);
        partial void OnYearChanging(ref global::System.Nullable<int> value);
        partial void OnYearChanged();
    
    /// <summary>
    /// There are no comments for Publisher in the schema.
    /// </summary>
    /// <LongDescription>
    /// Издатель.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Publisher
        {
            get
            {
                string value = _Publisher;
                OnGetPublisher(ref value);
                return value;
            }
            set
            {
                if (_Publisher != value)
                {
                  OnPublisherChanging(ref value);
                  ReportPropertyChanging("Publisher");
                  _Publisher = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Publisher");
                  OnPublisherChanged();
              }
            }
        }
        private string _Publisher;
        partial void OnGetPublisher(ref string value);
        partial void OnPublisherChanging(ref string value);
        partial void OnPublisherChanged();
    
    /// <summary>
    /// There are no comments for Volume in the schema.
    /// </summary>
    /// <LongDescription>
    /// Количество страниц.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> Volume
        {
            get
            {
                global::System.Nullable<int> value = _Volume;
                OnGetVolume(ref value);
                return value;
            }
            set
            {
                if (_Volume != value)
                {
                  OnVolumeChanging(ref value);
                  ReportPropertyChanging("Volume");
                  _Volume = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Volume");
                  OnVolumeChanged();
              }
            }
        }
        private global::System.Nullable<int> _Volume;
        partial void OnGetVolume(ref global::System.Nullable<int> value);
        partial void OnVolumeChanging(ref global::System.Nullable<int> value);
        partial void OnVolumeChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Author_Book", "Authors")]


        public EntityCollection<Author> Authors
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Author>("LibraryModel.Author_Book", "Authors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Author>("LibraryModel.Author_Book", "Authors", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Theme in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Book_Theme", "Themes")]


        public EntityCollection<Theme> Themes
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Theme>("LibraryModel.Book_Theme", "Themes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Theme>("LibraryModel.Book_Theme", "Themes", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Research in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Book_Research", "Researches")]


        public EntityCollection<Research> Researches
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Research>("LibraryModel.Book_Research", "Researches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Research>("LibraryModel.Book_Research", "Researches", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for File in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Book_File", "Files")]


        public EntityCollection<File> Files
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<File>("LibraryModel.Book_File", "Files");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<File>("LibraryModel.Book_File", "Files", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Book", "Articles")]


        public EntityCollection<Article> Articles
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Article>("LibraryModel.Article_Book", "Articles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Article>("LibraryModel.Article_Book", "Articles", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Author

    /// <summary>
    /// There are no comments for LibraryModel.Author in the schema.
    /// </summary>
    /// <LongDescription>
    /// Таблица авторов, статей, книг, экспериментов и пр.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="Author")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Author : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Author object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="lastName">Initial value of LastName.</param>
        public static Author CreateAuthor(int id, string lastName)
        {
            Author author = new Author();
            author.Id = id;
            author.LastName = lastName;
            return author;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный внутренний идентификатор.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for FirstName in the schema.
    /// </summary>
    /// <LongDescription>
    /// Имя автора.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                string value = _FirstName;
                OnGetFirstName(ref value);
                return value;
            }
            set
            {
                if (_FirstName != value)
                {
                  OnFirstNameChanging(ref value);
                  ReportPropertyChanging("FirstName");
                  _FirstName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("FirstName");
                  OnFirstNameChanged();
              }
            }
        }
        private string _FirstName;
        partial void OnGetFirstName(ref string value);
        partial void OnFirstNameChanging(ref string value);
        partial void OnFirstNameChanged();
    
    /// <summary>
    /// There are no comments for MiddleName in the schema.
    /// </summary>
    /// <LongDescription>
    /// Отчество автора.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string MiddleName
        {
            get
            {
                string value = _MiddleName;
                OnGetMiddleName(ref value);
                return value;
            }
            set
            {
                if (_MiddleName != value)
                {
                  OnMiddleNameChanging(ref value);
                  ReportPropertyChanging("MiddleName");
                  _MiddleName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("MiddleName");
                  OnMiddleNameChanged();
              }
            }
        }
        private string _MiddleName;
        partial void OnGetMiddleName(ref string value);
        partial void OnMiddleNameChanging(ref string value);
        partial void OnMiddleNameChanged();
    
    /// <summary>
    /// There are no comments for LastName in the schema.
    /// </summary>
    /// <LongDescription>
    /// Фамилимя автора.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string LastName
        {
            get
            {
                string value = _LastName;
                OnGetLastName(ref value);
                return value;
            }
            set
            {
                if (_LastName != value)
                {
                  OnLastNameChanging(ref value);
                  ReportPropertyChanging("LastName");
                  _LastName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("LastName");
                  OnLastNameChanged();
              }
            }
        }
        private string _LastName;
        partial void OnGetLastName(ref string value);
        partial void OnLastNameChanging(ref string value);
        partial void OnLastNameChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Book in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Author_Book", "Books")]


        public EntityCollection<Book> Books
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Book>("LibraryModel.Author_Book", "Books");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Book>("LibraryModel.Author_Book", "Books", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Research in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Author_Research", "Researches")]


        public EntityCollection<Research> Researches
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Research>("LibraryModel.Author_Research", "Researches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Research>("LibraryModel.Author_Research", "Researches", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Theme in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Author_Theme", "Themes")]


        public EntityCollection<Theme> Themes
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Theme>("LibraryModel.Author_Theme", "Themes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Theme>("LibraryModel.Author_Theme", "Themes", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Article_Author", "Articles")]


        public EntityCollection<Article> Articles
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Article>("LibraryModel.Article_Author", "Articles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Article>("LibraryModel.Article_Author", "Articles", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Type

    /// <summary>
    /// There are no comments for LibraryModel.Type in the schema.
    /// </summary>
    /// <LongDescription>
    /// Тип содержимого тех или иных элементов.
    /// </LongDescription>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="LibraryModel", Name="Type")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Type : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Type object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        public static Type CreateType(int id, string name)
        {
            Type type = new Type();
            type.Id = id;
            type.Name = name;
            return type;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for Id in the schema.
    /// </summary>
    /// <LongDescription>
    /// Уникальный внутренний идентификатор.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    /// <LongDescription>
    /// Название типа.
    /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
    /// <summary>
    /// There are no comments for Description in the schema.
    /// </summary>
    /// <LongDescription>
    /// Описание типа.
    /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for File in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LibraryModel", "Type_File", "Files")]


        public EntityCollection<File> Files
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<File>("LibraryModel.Type_File", "Files");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<File>("LibraryModel.Type_File", "Files", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #endregion
}
